{"version":3,"file":"imdbapi.service.js","sourceRoot":"","sources":["imdbapi.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http }  from '@angular/http';\nimport { Movie, MovieFields } from '../models/movie';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class IMDBAPIService {\n\n  private moviesUrl:string = \"app/marvel-cinematic-universe.json\";\n\n  constructor(private http: Http) { }\n\n  /**\n   * Return a Promise to a Movie matching id\n   * @param  {number}            id\n   * @return {Promise<Movie>}   \n   */\n  public fecthOneById(id:number):Promise<Movie>{\n      console.log('fecthOneById', id);\n\n        return this.http.get(this.moviesUrl)\n        /**\n         * Transforms the result of the http get, which is observable\n         * into one observable by item.\n         */\n        .flatMap(res => res.json().movies)\n        /**\n         * Filters movies by their movie_id\n         */\n        .filter((movie:any)=>{\n            console.log(\"filter\", movie);\n            return (movie.movie_id === id)\n        })\n        .toPromise()\n        /**\n         * Map the json movie item to the Movie model\n        */\n        .then((movie:any) => {\n            console.log(\"map\", movie); \n            return new Movie(\n                movie.movie_id,\n                movie.title,\n                movie.phase,\n                movie.category_name,\n                movie.release_year,\n                movie.running_time,\n                movie.rating_name,\n                movie.disc_format_name,\n                movie.number_discs,\n                movie.viewing_format_name,\n                movie.aspect_ratio_name,\n                movie.status,\n                movie.release_date,\n                movie.budget,\n                movie.gross,\n                movie.time_stamp\n            )\n        });\n  } \n\n  /**\n   * Private member storing pending promises\n   */\n  private promises:Promise<Movie[]>[] = [];\n\n  /**\n   * Register one promess for field/value. Returns this\n   * for chaining i.e.\n   *\n   *  byField(Y, X)\n   * .or(...)\n   * .fetch()\n   * \n   * @param  {MovieFields}    field\n   * @param  {any}            value\n   * @return {IMDBAPIService}      \n   */\n  public byField(field:MovieFields, value:any):IMDBAPIService{\n      this.promises.push(this.fetchByField(field, value));\n      return this;\n  }\n\n  /**\n   * Convenient method to make the calls more readable, i.e.\n   * \n   *  byField(Y, X)\n   * .or(...)\n   * .fetch()\n   *\n   * instead of \n   *\n   *  byField(Y, X)\n   * .byField(...)\n   * .fetch()\n   * \n   * @param  {MovieFields}    field\n   * @param  {any}            value\n   * @return {IMDBAPIService}      \n   */\n  public or(field:MovieFields, value:any):IMDBAPIService{\n      return this.byField(field, value);\n  }\n\n  /**\n   * Join all the promises and return the aggregated result.\n   * \n   * @return {Promise<Movie[]>}\n   */\n  public fetch():Promise<Movie[]>{\n      return Promise.all(this.promises).then((results:any) => {\n            //result is am array of movie arrays. One array per \n            //promise. We need to flatten it.\n            return [].concat.apply([], results);\n      });\n  }\n\n  public fetchByField(field:MovieFields, value:any):Promise<Movie[]>{\n      console.log('fetchByField', field, value);\n\n      return this.http.get(this.moviesUrl)\n        /**\n         * Transforms the result of the http get, which is observable\n         * into one observable by item.\n         */\n        .map(res => res.json().movies.filter(\n            (movie)=>{\n                return (movie[MovieFields[field]] === value)\n            })\n        )\n        .toPromise()\n        /**\n         * Map the json movie item to the Movie model\n        */\n        .then((jsonMovies:any[]) => {\n\n            console.log(\"map\", jsonMovies); \n            let movies:Movie[] = [];\n\n            for (var i = 0; i < jsonMovies.length; i++) {\n                movies.push(\n                    new Movie(\n                        jsonMovies[i].movie_id,\n                        jsonMovies[i].title,\n                        jsonMovies[i].phase,\n                        jsonMovies[i].category_name,\n                        jsonMovies[i].release_year,\n                        jsonMovies[i].running_time,\n                        jsonMovies[i].rating_name,\n                        jsonMovies[i].disc_format_name,\n                        jsonMovies[i].number_discs,\n                        jsonMovies[i].viewing_format_name,\n                        jsonMovies[i].aspect_ratio_name,\n                        jsonMovies[i].status,\n                        jsonMovies[i].release_date,\n                        jsonMovies[i].budget,\n                        jsonMovies[i].gross,\n                        jsonMovies[i].time_stamp\n                    )\n                )\n            }\n            return movies;\n        });\n\n  }\n}\n"]}