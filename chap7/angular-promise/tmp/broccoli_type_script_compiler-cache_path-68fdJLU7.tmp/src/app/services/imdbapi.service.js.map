{"version":3,"file":"imdbapi.service.js","sourceRoot":"","sources":["imdbapi.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http }  from '@angular/http';\nimport { Movie, MovieFields } from '../models/movie';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class IMDBAPIService {\n\n  private moviesUrl:string = \"app/marvel-cinematic-universe.json\";\n\n  constructor(private http: Http) { }\n\n  /**\n   * Return an Observable to a Movie matching id\n   * @param  {number}            id\n   * @return {Observable<Movie>}   \n   */\n  public fecthOneById(id:number):Observable<Movie>{\n      console.log('fecthOneById', id);\n\n        return this.http.get(this.moviesUrl)\n        /**\n         * Transforms the result of the http get, which is observable\n         * into one observable by item.\n         */\n        .flatMap(res => res.json().movies)\n        /**\n         * Filters movies by their movie_id\n         */\n        .filter((movie:any)=>{\n            console.log(\"filter\", movie);\n            return (movie.movie_id === id)\n        })\n        /**\n         * Map the json movie item to the Movie model\n         */\n        .map((movie:any) => {\n            console.log(\"map\", movie); \n            return new Movie(\n                movie.movie_id,\n                movie.title,\n                movie.phase,\n                movie.category_name,\n                movie.release_year,\n                movie.running_time,\n                movie.rating_name,\n                movie.disc_format_name,\n                movie.number_discs,\n                movie.viewing_format_name,\n                movie.aspect_ratio_name,\n                movie.status,\n                movie.release_date,\n                movie.budget,\n                movie.gross,\n                movie.time_stamp\n            );\n        });\n  } \n\n  public fetchByField(field:MovieFields, value:any){\n      console.log('fetchByField', field, value);\n\n      return this.http.get(this.moviesUrl)\n        /**\n         * Transforms the result of the http get, which is observable\n         * into one observable by item.\n         */\n        .flatMap(res => res.json().movies)\n        /**\n         * Filters movies by their field\n         */\n        .filter((movie:any)=>{\n            console.log(\"filter\", movie);\n             var now = new Date().getTime();\n            while(new Date().getTime() < now + 2000){ /* do nothing */ } \n\n            return (movie[MovieFields[field]] === value)\n        })\n        /**\n         * Map the json movie item to the Movie model\n         */\n        .map((movie:any) => {\n            console.log(\"map\", movie); \n            return new Movie(\n                movie.movie_id,\n                movie.title,\n                movie.phase,\n                movie.category_name,\n                movie.release_year,\n                movie.running_time,\n                movie.rating_name,\n                movie.disc_format_name,\n                movie.number_discs,\n                movie.viewing_format_name,\n                movie.aspect_ratio_name,\n                movie.status,\n                movie.release_date,\n                movie.budget,\n                movie.gross,\n                movie.time_stamp\n            );\n        });\n\n  }\n}\n"]}