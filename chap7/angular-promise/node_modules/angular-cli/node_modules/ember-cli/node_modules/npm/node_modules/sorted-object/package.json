{
  "_args": [
    [
      {
        "raw": "sorted-object@1.0.0",
        "scope": null,
        "escapedName": "sorted-object",
        "name": "sorted-object",
        "rawSpec": "1.0.0",
        "spec": "1.0.0",
        "type": "version"
      },
      "/home/math/www/Mastering-Angular-2/chap7/angular-observable/node_modules/angular-cli"
    ]
  ],
  "_from": "sorted-object@",
  "_id": "sorted-object@1.0.0",
  "_location": "/angular-cli/ember-cli/npm/sorted-object",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sorted-object@1.0.0",
    "scope": null,
    "escapedName": "sorted-object",
    "name": "sorted-object",
    "rawSpec": "1.0.0",
    "spec": "1.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/angular-cli/ember-cli/npm"
  ],
  "_shrinkwrap": null,
  "_spec": "sorted-object@1.0.0",
  "_where": "/home/math/www/Mastering-Angular-2/chap7/angular-observable/node_modules/angular-cli",
  "author": {
    "name": "Domenic Denicola",
    "email": "domenic@domenicdenicola.com",
    "url": "http://domenic.me/"
  },
  "bugs": {
    "url": "http://github.com/domenic/sorted-object/issues"
  },
  "dependencies": {},
  "description": "Returns a copy of an object with its keys sorted",
  "devDependencies": {
    "jshint": "~2.4.3",
    "tape": "~2.4.2"
  },
  "homepage": "https://github.com/domenic/sorted-object",
  "keywords": [
    "sort",
    "keys",
    "object"
  ],
  "license": "WTFPL",
  "main": "lib/sorted-object.js",
  "name": "sorted-object",
  "optionalDependencies": {},
  "readme": "# Get a Version of an Object with Sorted Keys\n\nAlthough objects in JavaScript are theoretically unsorted, in practice most engines use insertion orderâ€”at least, ignoring numeric keys. This manifests itself most prominently when dealing with an object's JSON serialization.\n\nSo, for example, you might be trying to serialize some object to a JSON file. But every time you write it, it ends up being output in a different order, depending on how you created it in the first place! This makes for some ugly diffs.\n\n**sorted-object** gives you the answer. Just use this package to create a version of your object with its keys sorted before serializing, and you'll get a consistent order every time.\n\n```js\nvar sortedObject = require(\"sorted-object\");\n\nvar objectToSerialize = generateStuffNondeterministically();\n\n// Before:\nfs.writeFileSync(\"dest.json\", JSON.stringify(objectToSerialize));\n\n// After:\nvar sortedVersion = sortedObject(objectToSerialize);\nfs.writeFileSync(\"dest.json\", JSON.stringify(sortedVersion));\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/domenic/sorted-object.git"
  },
  "scripts": {
    "lint": "jshint lib && jshint test",
    "test": "tape test/tests.js"
  },
  "version": "1.0.0"
}
