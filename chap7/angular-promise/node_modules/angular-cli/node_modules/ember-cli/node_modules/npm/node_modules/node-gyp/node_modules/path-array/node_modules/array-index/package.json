{
  "_args": [
    [
      {
        "raw": "array-index@1.0.0",
        "scope": null,
        "escapedName": "array-index",
        "name": "array-index",
        "rawSpec": "1.0.0",
        "spec": "1.0.0",
        "type": "version"
      },
      "/home/math/www/Mastering-Angular-2/chap7/angular-observable/node_modules/angular-cli"
    ]
  ],
  "_from": "array-index@>=1.0.0 <2.0.0",
  "_id": "array-index@1.0.0",
  "_location": "/angular-cli/ember-cli/npm/node-gyp/path-array/array-index",
  "_nodeVersion": "5.3.0",
  "_npmUser": {
    "name": "tootallnate",
    "email": "nathan@tootallnate.net"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "array-index@1.0.0",
    "scope": null,
    "escapedName": "array-index",
    "name": "array-index",
    "rawSpec": "1.0.0",
    "spec": "1.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/angular-cli/ember-cli/npm/node-gyp/path-array"
  ],
  "_resolved": "https://registry.npmjs.org/array-index/-/array-index-1.0.0.tgz",
  "_shasum": "ec56a749ee103e4e08c790b9c353df16055b97f9",
  "_shrinkwrap": null,
  "_spec": "array-index@1.0.0",
  "_where": "/home/math/www/Mastering-Angular-2/chap7/angular-observable/node_modules/angular-cli",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net",
    "url": "http://tootallnate.net"
  },
  "bugs": {
    "url": "https://github.com/TooTallNate/array-index/issues"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "es6-symbol": "^3.0.2"
  },
  "description": "Invoke getter/setter functions on array-like objects",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "ec56a749ee103e4e08c790b9c353df16055b97f9",
    "tarball": "http://registry.npmjs.org/array-index/-/array-index-1.0.0.tgz"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "4b3cc059c70eefd8ef2a0d4213d681b671eb3d11",
  "homepage": "https://github.com/TooTallNate/array-index#readme",
  "keywords": [
    "index",
    "array",
    "getter",
    "setter",
    "proxy"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "tootallnate",
      "email": "nathan@tootallnate.net"
    }
  ],
  "name": "array-index",
  "optionalDependencies": {},
  "readme": "array-index\n===========\n### Invoke getter/setter functions on array-like objects\n[![Build Status](https://secure.travis-ci.org/TooTallNate/array-index.svg)](http://travis-ci.org/TooTallNate/array-index)\n\n\nThis little module provides an `ArrayIndex` constructor function that you can\ninherit from with your own objects. When a numbered property gets read, then the\n`ArrayIndex.get` function on the object will be invoked. When a numbered property gets\nset, then the `ArrayIndex.set` function on the object will be invoked.\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install array-index\n```\n\n\nExamples\n--------\n\nA quick silly example, using `Math.sqrt()` for the \"getter\":\n\n``` js\nvar ArrayIndex = require('array-index');\n\n// let's just create a singleton instance.\nvar a = new ArrayIndex();\n\n// the \"ArrayIndex.get\" function is invoked for each \"a[n]\" access.\n// it is given a single argument, the \"index\" currently being accessed.\n// so here, we're passing in the `Math.sqrt()` function, so accessing\n// \"a[9]\" will return `Math.sqrt(9)`.\na[ArrayIndex.get] = Math.sqrt;\n\n// the \"ArrayIndex.get\" and \"ArrayIndex.set\" functions are only invoked up\n// to \"a.length\", so we must set that manually.\na.length = 10;\n\nconsole.log(a);\n// [ 0,\n//   1,\n//   1.4142135623730951,\n//   1.7320508075688772,\n//   2,\n//   2.23606797749979,\n//   2.449489742783178,\n//   2.6457513110645907,\n//   2.8284271247461903,\n//   3 ]\n```\n\nHere's an example of creating a subclass of `ArrayIndex` using `util.inherits()`:\n\n``` js\nvar ArrayIndex = require('array-index');\nvar inherits = require('util').inherits;\n\nfunction MyArray (length) {\n  // be sure to call the ArrayIndex constructor in your own constructor\n  ArrayIndex.call(this, length);\n\n  // the \"set\" object will contain values at indexes previously set,\n  // so that they can be returned in the \"getter\" function. This is just a\n  // silly example, your subclass will have more meaningful logic.\n  Object.defineProperty(this, 'set', {\n    value: Object.create(null),\n    enumerable: false\n  });\n}\n\n// inherit from the ArrayIndex's prototype\ninherits(MyArray, ArrayIndex);\n\nMyArray.prototype[ArrayIndex.get] = function (index) {\n  if (index in this.set) return this.set[index];\n  return index * 2;\n};\n\nMyArray.prototype[ArrayIndex.set] = function (index, v) {\n  this.set[index] = v;\n};\n\n\n// and now you can create some instances\nvar a = new MyArray(15);\na[9] = a[10] = a[14] = '_';\na[0] = 'nate';\n\nconsole.log(a);\n// [ 'nate', 2, 4, 6, 8, 10, 12, 14, 16, '_', '_', 22, 24, 26, '_' ]\n```\n\nAPI\n---\n\nThe `ArrayIndex` base class is meant to be subclassed, but it also has a few\nconvenient functions built-in.\n\n### \"length\" → Number\n\nThe length of the ArrayIndex instance. The `ArrayIndex.get` and `ArrayIndex.set` functions will\nonly be invoked on the object up to this \"length\". You may set this length at any\ntime to adjust the amount range where the getters/setters will be invoked.\n\n### \"toArray()\" → Array\n\nReturns a new regular Array instance with the same values that this ArrayIndex\nclass would have. This function calls the `ArrayIndex.get` function repeatedly from\n`0...length-1` and returns the \"flattened\" array instance.\n\n### \"toJSON()\" → Array\n\nAll `ArrayIndex` instances get basic support for `JSON.stringify()`, which is\nthe same as a \"flattened\" Array being stringified.\n\n### \"toString()\" → String\n\nThe `toString()` override is basically just `array.toArray().toString()`.\n\n### \"format()\" → String\n\nThe `inspect()` implementation for the REPL attempts to mimic what a regular\nArray looks like in the REPL.\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/array-index.git"
  },
  "scripts": {
    "test": "node test"
  },
  "version": "1.0.0"
}
